schema {
  query: Query
  mutation: Mutation
}

input ClientProperties {
  environment: String
}

input CreateEngagementEventInput {
  clientProperties: ClientProperties
  deviceProperties: DeviceProperties!
  eventContext: EngagementEventContext
  locale: String
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

enum DeviceOrientation {
  Landscape
  NotAvailable
  Portrait
}

input DeviceProperties {
  cpu: String
  id: String!
  memory: String
  model: String
  operatingSystemName: String
  operatingSystemVersion: String
  orientation: DeviceOrientation
  resolution: String
}

type EngagementEvent {
  createdAt: DateTimeISO!
  id: String!
  name: String!
}

input EngagementEventContext {
  loadDurationInMilliseconds: Int
  previousViewDurationInMilliseconds: Int
  previousViewIdentifier: String
  previousViewTitle: String
  referrer: String
  sessionDurationInMilliseconds: Int
  viewDurationInMilliseconds: Int
  viewIdentifier: String
  viewTitle: String
}

type EngagementLocationOverview {
  countryCode: String
  latitude: String
  longitude: String
  uniqueDeviceCount: Int!
}

type EngagementOverview {
  deviceCategoryPercentages: JSON!
  locations: [EngagementLocationOverview!]!
  uniqueDeviceIds: Int!
  views: [EngagementViewOverview!]!
}

input EngagementOverviewInput {
  endTime: DateTimeISO
  startTime: DateTimeISO
}

type EngagementViewOverview {
  uniqueDeviceCount: Int!
  viewIdentifier: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  engagementEventCreate(input: CreateEngagementEventInput!): Boolean!
  engagementEventsCreate(inputs: [CreateEngagementEventInput!]!): Boolean!
}

type Query {
  engagementEvents: [EngagementEvent!]!
  engagementOverview(input: EngagementOverviewInput, live: Boolean): EngagementOverview!
}